{"version":3,"sources":["api/users.ts","helpers/findMaxTodoId.ts","components/TodoForm/TodoForm.tsx","components/UserInfo/UserInfo.tsx","components/TodoInfo/TodoInfo.tsx","helpers/findUserById.ts","components/TodoList/TodoList.tsx","api/todos.ts","App.tsx","index.tsx"],"names":["id","name","username","email","findMaxId","users","todoId","map","Math","max","initialFormValue","titleInput","userSelect","TodoForm","addTodo","todos","useState","formValues","setFormValues","inputError","setInputError","selectError","setSelectError","handleSetFormValues","event","value","target","Number","trimStart","prevState","action","method","className","type","required","onChange","e","disabled","usersFromServer","onClick","preventDefault","title","userId","todo","completed","handleAddTodo","UserInfo","user","href","TodoInfo","array","find","findUserByID","cn","TodoList","App","todosFromServer","setTodos","prev","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.827379f9.chunk.js","sourcesContent":["export default [\n  {\n    id: 1,\n    name: 'Leanne Graham',\n    username: 'Bret',\n    email: 'Sincere@april.biz',\n  },\n  {\n    id: 2,\n    name: 'Ervin Howell',\n    username: 'Antonette',\n    email: 'Shanna@melissa.tv',\n  },\n  {\n    id: 3,\n    name: 'Clementine Bauch',\n    username: 'Samantha',\n    email: 'Nathan@yesenia.net',\n  },\n  {\n    id: 4,\n    name: 'Patricia Lebsack',\n    username: 'Karianne',\n    email: 'Julianne.OConner@kory.org',\n  },\n  {\n    id: 5,\n    name: 'Chelsey Dietrich',\n    username: 'Kamren',\n    email: 'Lucio_Hettinger@annie.ca',\n  },\n  {\n    id: 6,\n    name: 'Mrs. Dennis Schulist',\n    username: 'Leopoldo_Corkery',\n    email: 'Karley_Dach@jasper.info',\n  },\n  {\n    id: 7,\n    name: 'Kurtis Weissnat',\n    username: 'Elwyn.Skiles',\n    email: 'Telly.Hoeger@billy.biz',\n  },\n  {\n    id: 8,\n    name: 'Nicholas Runolfsdottir V',\n    username: 'Maxime_Nienow',\n    email: 'Sherwood@rosamond.me',\n  },\n  {\n    id: 9,\n    name: 'Glenna Reichert',\n    username: 'Delphine',\n    email: 'Chaim_McDermott@dana.io',\n  },\n  {\n    id: 10,\n    name: 'Clementina DuBuque',\n    username: 'Moriah.Stanton',\n    email: 'Rey.Padberg@karina.biz',\n  },\n];\n","import { TodoType } from '../types';\n\nexport const findMaxId = (users: TodoType[]) => {\n  const todoId = users.map(({ id }) => id);\n\n  return Math.max(...todoId);\n};\n","import React, { useState } from 'react';\n\nimport { FormType, TodoType } from '../../types';\nimport usersFromServer from '../../api/users';\nimport { findMaxId } from '../../helpers/findMaxTodoId';\n\ntype Props = {\n  addTodo: (todo: TodoType) => void,\n  todos: TodoType[]\n};\n\nconst initialFormValue = {\n  titleInput: '',\n  userSelect: 0,\n};\n\nexport const TodoForm: React.FC<Props> = ({ addTodo, todos }) => {\n  const [formValues, setFormValues] = useState<FormType>(initialFormValue);\n  const [inputError, setInputError] = useState(false);\n  const [selectError, setSelectError] = useState(false);\n\n  const handleSetFormValues\n  = (event: React.ChangeEvent<HTMLInputElement | HTMLSelectElement>) => {\n    let value: number | string = '';\n\n    if (event.target.name === 'userSelect') {\n      value = Number(event.target.value);\n      setSelectError(false);\n    }\n\n    if (event.target.name === 'titleInput') {\n      value = event.target.value.trimStart();\n      setInputError(false);\n    }\n\n    setFormValues(prevState => ({\n      ...prevState,\n      [event.target.name]: value,\n    }));\n  };\n\n  const handleAddTodo = (event: React.MouseEvent<HTMLButtonElement>) => {\n    event.preventDefault();\n\n    const { titleInput: title, userSelect: userId } = formValues;\n\n    if (!title) {\n      setInputError(true);\n    }\n\n    if (userId === 0) {\n      setSelectError(true);\n    }\n\n    if (!title || userId === 0) {\n      return;\n    }\n\n    const todo: TodoType = {\n      id: findMaxId(todos) + 1,\n      completed: false,\n      title,\n      userId,\n    };\n\n    addTodo(todo);\n    setFormValues(initialFormValue);\n  };\n\n  return (\n    <form action=\"/api/todos\" method=\"POST\">\n      <div className=\"field\">\n        <input\n          type=\"text\"\n          data-cy=\"titleInput\"\n          name=\"titleInput\"\n          value={formValues.titleInput}\n          required\n          onChange={(e) => handleSetFormValues(e)}\n        />\n\n        {inputError && (\n          <span className=\"error\">Please enter a title</span>\n        )}\n      </div>\n\n      <div className=\"field\">\n        <select\n          data-cy=\"userSelect\"\n          name=\"userSelect\"\n          value={formValues.userSelect}\n          required\n          onChange={(e) => handleSetFormValues(e)}\n        >\n          <option value=\"0\" disabled>Choose a user</option>\n\n          {usersFromServer.map(({ id, name }) => (\n            <option value={id} key={id}>\n              {name}\n            </option>\n          ))}\n        </select>\n\n        {selectError && (\n          <span className=\"error\">Please choose a user</span>\n        )}\n      </div>\n\n      <button\n        type=\"submit\"\n        data-cy=\"submitButton\"\n        onClick={e => handleAddTodo(e)}\n      >\n        Add\n      </button>\n    </form>\n  );\n};\n","import React from 'react';\n\nimport { UserType } from '../../types';\n\ntype Props = {\n  user: UserType,\n};\n\nexport const UserInfo: React.FC<Props> = ({ user }) => {\n  const { name, email } = user;\n\n  return (\n    <a className=\"UserInfo\" href={`mailto:${email}`}>\n      {name}\n    </a>\n  );\n};\n","import React from 'react';\nimport cn from 'classnames';\n\nimport { UserInfo } from '../UserInfo';\n\nimport { TodoType, UserType } from '../../types';\nimport usersFromServer from '../../api/users';\nimport { findUserByID } from '../../helpers/findUserById';\n\ntype Props = {\n  todo: TodoType,\n};\n\nexport const TodoInfo: React.FC<Props> = ({ todo }) => {\n  const {\n    id,\n    title,\n    completed,\n    userId,\n  } = todo;\n\n  const user = findUserByID(userId, usersFromServer) as UserType;\n\n  return (\n    <article\n      data-id={id}\n      className={cn('TodoInfo', {\n        'TodoInfo--completed': completed,\n      })}\n    >\n      <h2 className=\"TodoInfo__title\">\n        {title}\n      </h2>\n\n      <UserInfo user={user} />\n    </article>\n  );\n};\n","import { UserType as UT } from '../types';\n\nexport const findUserByID = (userId: number, array: UT[]): UT | null => array\n  .find(({ id }) => id === userId) || null;\n","import React from 'react';\n\nimport { TodoInfo } from '../TodoInfo';\nimport { TodoType } from '../../types';\n\ntype Props = {\n  todos: TodoType[]\n};\n\nexport const TodoList: React.FC<Props> = ({\n  todos,\n}) => {\n  return (\n    <section className=\"TodoList\">\n      {todos.map(todo => (\n        <TodoInfo todo={todo} key={todo.id} />\n      ))}\n    </section>\n  );\n};\n","export default [\n  {\n    id: 1,\n    title: 'delectus aut autem',\n    completed: true,\n    userId: 1,\n  },\n  {\n    id: 15,\n    title: 'some other todo',\n    completed: false,\n    userId: 1,\n  },\n  {\n    id: 2,\n    title: 'quis ut nam facilis et officia qui',\n    completed: false,\n    userId: 4,\n  },\n];\n","import { useState } from 'react';\nimport './App.scss';\n\nimport { TodoForm } from './components/TodoForm';\nimport { TodoList } from './components/TodoList';\n\nimport { TodoType } from './types';\n\nimport todosFromServer from './api/todos';\n\nexport const App = () => {\n  const [todos, setTodos] = useState<TodoType[]>(todosFromServer);\n\n  const handleAddTodo = (todo: TodoType) => {\n    setTodos(prev => [...prev, todo]);\n  };\n\n  return (\n    <div className=\"App\">\n      <h1>Add todo form</h1>\n\n      <TodoForm addTodo={handleAddTodo} todos={todos} />\n\n      <TodoList todos={todos} />\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}